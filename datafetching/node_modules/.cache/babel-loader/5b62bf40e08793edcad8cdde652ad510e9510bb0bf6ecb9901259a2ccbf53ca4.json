{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\arpit\\\\Documents\\\\SharpnerReact\\\\ReactProjects\\\\datafetching\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport MoviesList from './components/MoviesList';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    async function fetchMoviesHandler() {\n      setIsLoading(true);\n      setError(null);\n      try {\n        let response = await fetch('https://swapi.dev/api/films/');\n        if (!response.ok) {\n          throw new Error('Something went wrong');\n        }\n        let data = await response.json();\n        const transformMovies = data.results.map(movieData => {\n          return {\n            id: movieData.episode_id,\n            title: movieData.title,\n            openingText: movieData.opening_crawl,\n            releaseDate: movieData.release_date\n          };\n        });\n        setMovies(transformMovies);\n      } catch (error) {\n        setError(error.message);\n      }\n      setIsLoading(false);\n    }\n    fetchMoviesHandler();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Fetch Movies\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [!isLoading && movies.length > 0 && /*#__PURE__*/_jsxDEV(MoviesList, {\n        movies: movies\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 45\n      }, this), !isLoading && movies.length === 0 && !error && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No movies found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 54\n      }, this), !isLoading && error && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [error, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 33\n      }, this), isLoading && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 23\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"gvvaxtNEH69eVRFSOgl7uh+ZsGU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","MoviesList","jsxDEV","_jsxDEV","App","_s","movies","setMovies","isLoading","setIsLoading","error","setError","fetchMoviesHandler","response","fetch","ok","Error","data","json","transformMovies","results","map","movieData","id","episode_id","title","openingText","opening_crawl","releaseDate","release_date","message","Fragment","children","fileName","_jsxFileName","lineNumber","columnNumber","length","_c","$RefreshReg$"],"sources":["C:/Users/arpit/Documents/SharpnerReact/ReactProjects/datafetching/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nimport MoviesList from './components/MoviesList';\nimport './App.css';\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false)\n  const [error, setError] = useState(null)\n\n  useEffect(()=>{\n    async function fetchMoviesHandler() {\n\n  \n      setIsLoading(true)\n      setError(null)\n      try {\n        let response = await fetch('https://swapi.dev/api/films/')\n        \n        if (!response.ok) {\n          throw new Error('Something went wrong')\n        }\n  \n        let data = await response.json();\n  \n  \n        const transformMovies = data.results.map((movieData => {\n          return {\n            id: movieData.episode_id,\n            title: movieData.title,\n            openingText: movieData.opening_crawl,\n            releaseDate: movieData.release_date\n          }\n        }))\n  \n        setMovies(transformMovies)\n      }\n      catch (error) {\n        setError(error.message)\n      }\n      setIsLoading(false);\n    }\n    fetchMoviesHandler()\n     \n\n  },[])\n \n\n\n  return (\n    <React.Fragment>\n      <section>\n        <button>Fetch Movies</button>\n\n      </section>\n\n      <section>\n        {!isLoading && movies.length > 0 && <MoviesList movies={movies} />}\n        {!isLoading && movies.length===0 && !error &&<p>No movies found</p>}\n        {!isLoading && error && <p>{error} </p>}\n        {isLoading && <p>Loading...</p>}\n\n\n      </section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAElD,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAExCD,SAAS,CAAC,MAAI;IACZ,eAAea,kBAAkBA,CAAA,EAAG;MAGlCH,YAAY,CAAC,IAAI,CAAC;MAClBE,QAAQ,CAAC,IAAI,CAAC;MACd,IAAI;QACF,IAAIE,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;QAE1D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;QACzC;QAEA,IAAIC,IAAI,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;QAGhC,MAAMC,eAAe,GAAGF,IAAI,CAACG,OAAO,CAACC,GAAG,CAAEC,SAAS,IAAI;UACrD,OAAO;YACLC,EAAE,EAAED,SAAS,CAACE,UAAU;YACxBC,KAAK,EAAEH,SAAS,CAACG,KAAK;YACtBC,WAAW,EAAEJ,SAAS,CAACK,aAAa;YACpCC,WAAW,EAAEN,SAAS,CAACO;UACzB,CAAC;QACH,CAAE,CAAC;QAEHtB,SAAS,CAACY,eAAe,CAAC;MAC5B,CAAC,CACD,OAAOT,KAAK,EAAE;QACZC,QAAQ,CAACD,KAAK,CAACoB,OAAO,CAAC;MACzB;MACArB,YAAY,CAAC,KAAK,CAAC;IACrB;IACAG,kBAAkB,CAAC,CAAC;EAGtB,CAAC,EAAC,EAAE,CAAC;EAIL,oBACET,OAAA,CAACL,KAAK,CAACiC,QAAQ;IAAAC,QAAA,gBACb7B,OAAA;MAAA6B,QAAA,eACE7B,OAAA;QAAA6B,QAAA,EAAQ;MAAY;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEtB,CAAC,eAEVjC,OAAA;MAAA6B,QAAA,GACG,CAACxB,SAAS,IAAIF,MAAM,CAAC+B,MAAM,GAAG,CAAC,iBAAIlC,OAAA,CAACF,UAAU;QAACK,MAAM,EAAEA;MAAO;QAAA2B,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,EACjE,CAAC5B,SAAS,IAAIF,MAAM,CAAC+B,MAAM,KAAG,CAAC,IAAI,CAAC3B,KAAK,iBAAGP,OAAA;QAAA6B,QAAA,EAAG;MAAe;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,EAClE,CAAC5B,SAAS,IAAIE,KAAK,iBAAIP,OAAA;QAAA6B,QAAA,GAAItB,KAAK,EAAC,GAAC;MAAA;QAAAuB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,EACtC5B,SAAS,iBAAIL,OAAA;QAAA6B,QAAA,EAAG;MAAU;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGxB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACI,CAAC;AAErB;AAAC/B,EAAA,CA7DQD,GAAG;AAAAkC,EAAA,GAAHlC,GAAG;AA+DZ,eAAeA,GAAG;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}